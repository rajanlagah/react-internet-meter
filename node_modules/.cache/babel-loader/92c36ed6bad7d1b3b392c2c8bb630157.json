{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/home/rajan/Documents/Rajan/OpenSource/React/react-internet-speed-meter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nconst escapeStringRegexp = require('escape-string-regexp');\n\nconst ansiStyles = require('ansi-styles');\n\nconst stdoutColor = require('supports-color').stdout;\n\nconst template = require('./templates.js');\n\nconst isSimpleWindowsTerm = process.platform === 'win32' && !(process.env.TERM || '').toLowerCase().startsWith('xterm'); // `supportsColor.level` â†’ `ansiStyles.color[name]` mapping\n\nconst levelMapping = ['ansi', 'ansi', 'ansi256', 'ansi16m']; // `color-convert` models to exclude from the Chalk API due to conflicts and such\n\nconst skipModels = new Set(['gray']);\nconst styles = Object.create(null);\n\nfunction applyOptions(obj, options) {\n  options = options || {}; // Detect level if not set manually\n\n  const scLevel = stdoutColor ? stdoutColor.level : 0;\n  obj.level = options.level === undefined ? scLevel : options.level;\n  obj.enabled = 'enabled' in options ? options.enabled : obj.level > 0;\n}\n\nfunction Chalk(options) {\n  // We check for this.template here since calling `chalk.constructor()`\n  // by itself will have a `this` of a previously constructed chalk object\n  if (!this || !(this instanceof Chalk) || this.template) {\n    const chalk = {};\n    applyOptions(chalk, options);\n\n    chalk.template = function () {\n      const args = [].slice.call(arguments);\n      return chalkTag.apply(null, [chalk.template].concat(args));\n    };\n\n    Object.setPrototypeOf(chalk, Chalk.prototype);\n    Object.setPrototypeOf(chalk.template, chalk);\n    chalk.template.constructor = Chalk;\n    return chalk.template;\n  }\n\n  applyOptions(this, options);\n} // Use bright blue on Windows as the normal blue color is illegible\n\n\nif (isSimpleWindowsTerm) {\n  ansiStyles.blue.open = '\\u001B[94m';\n}\n\nfor (var _i = 0, _Object$keys = Object.keys(ansiStyles); _i < _Object$keys.length; _i++) {\n  const key = _Object$keys[_i];\n  ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');\n  styles[key] = {\n    get() {\n      const codes = ansiStyles[key];\n      return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, key);\n    }\n\n  };\n}\n\nstyles.visible = {\n  get() {\n    return build.call(this, this._styles || [], true, 'visible');\n  }\n\n};\nansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), 'g');\n\nfor (var _i2 = 0, _Object$keys2 = Object.keys(ansiStyles.color.ansi); _i2 < _Object$keys2.length; _i2++) {\n  const model = _Object$keys2[_i2];\n\n  if (skipModels.has(model)) {\n    continue;\n  }\n\n  styles[model] = {\n    get() {\n      const level = this.level;\n      return function () {\n        const open = ansiStyles.color[levelMapping[level]][model].apply(null, arguments);\n        const codes = {\n          open,\n          close: ansiStyles.color.close,\n          closeRe: ansiStyles.color.closeRe\n        };\n        return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);\n      };\n    }\n\n  };\n}\n\nansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), 'g');\n\nfor (var _i3 = 0, _Object$keys3 = Object.keys(ansiStyles.bgColor.ansi); _i3 < _Object$keys3.length; _i3++) {\n  const model = _Object$keys3[_i3];\n\n  if (skipModels.has(model)) {\n    continue;\n  }\n\n  const bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);\n  styles[bgModel] = {\n    get() {\n      const level = this.level;\n      return function () {\n        const open = ansiStyles.bgColor[levelMapping[level]][model].apply(null, arguments);\n        const codes = {\n          open,\n          close: ansiStyles.bgColor.close,\n          closeRe: ansiStyles.bgColor.closeRe\n        };\n        return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);\n      };\n    }\n\n  };\n}\n\nconst proto = Object.defineProperties(() => {}, styles);\n\nfunction build(_styles, _empty, key) {\n  const builder = function builder() {\n    return applyStyle.apply(builder, arguments);\n  };\n\n  builder._styles = _styles;\n  builder._empty = _empty;\n  const self = this;\n  Object.defineProperty(builder, 'level', {\n    enumerable: true,\n\n    get() {\n      return self.level;\n    },\n\n    set(level) {\n      self.level = level;\n    }\n\n  });\n  Object.defineProperty(builder, 'enabled', {\n    enumerable: true,\n\n    get() {\n      return self.enabled;\n    },\n\n    set(enabled) {\n      self.enabled = enabled;\n    }\n\n  }); // See below for fix regarding invisible grey/dim combination on Windows\n\n  builder.hasGrey = this.hasGrey || key === 'gray' || key === 'grey'; // `__proto__` is used because we must return a function, but there is\n  // no way to create a function with a different prototype\n\n  builder.__proto__ = proto; // eslint-disable-line no-proto\n\n  return builder;\n}\n\nfunction applyStyle() {\n  // Support varags, but simply cast to string in case there's only one arg\n  const args = arguments;\n  const argsLen = args.length;\n  let str = String(arguments[0]);\n\n  if (argsLen === 0) {\n    return '';\n  }\n\n  if (argsLen > 1) {\n    // Don't slice `arguments`, it prevents V8 optimizations\n    for (let a = 1; a < argsLen; a++) {\n      str += ' ' + args[a];\n    }\n  }\n\n  if (!this.enabled || this.level <= 0 || !str) {\n    return this._empty ? '' : str;\n  } // Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,\n  // see https://github.com/chalk/chalk/issues/58\n  // If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.\n\n\n  const originalDim = ansiStyles.dim.open;\n\n  if (isSimpleWindowsTerm && this.hasGrey) {\n    ansiStyles.dim.open = '';\n  }\n\n  var _iterator = _createForOfIteratorHelper(this._styles.slice().reverse()),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      const code = _step.value;\n      // Replace any instances already present with a re-opening code\n      // otherwise only the part of the string until said closing code\n      // will be colored, and the rest will simply be 'plain'.\n      str = code.open + str.replace(code.closeRe, code.open) + code.close; // Close the styling before a linebreak and reopen\n      // after next line to fix a bleed issue on macOS\n      // https://github.com/chalk/chalk/pull/92\n\n      str = str.replace(/\\r?\\n/g, \"\".concat(code.close, \"$&\").concat(code.open));\n    } // Reset the original `dim` if we changed it to work around the Windows dimmed gray issue\n\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  ansiStyles.dim.open = originalDim;\n  return str;\n}\n\nfunction chalkTag(chalk, strings) {\n  if (!Array.isArray(strings)) {\n    // If chalk() was called by itself or with a string,\n    // return the string itself as a string.\n    return [].slice.call(arguments, 1).join(' ');\n  }\n\n  const args = [].slice.call(arguments, 2);\n  const parts = [strings.raw[0]];\n\n  for (let i = 1; i < strings.length; i++) {\n    parts.push(String(args[i - 1]).replace(/[{}\\\\]/g, '\\\\$&'));\n    parts.push(String(strings.raw[i]));\n  }\n\n  return template(chalk, parts.join(''));\n}\n\nObject.defineProperties(Chalk.prototype, styles);\nmodule.exports = Chalk(); // eslint-disable-line new-cap\n\nmodule.exports.supportsColor = stdoutColor;\nmodule.exports.default = module.exports; // For TypeScript","map":{"version":3,"sources":["/home/rajan/Documents/Rajan/OpenSource/React/react-internet-speed-meter/node_modules/chalk/index.js"],"names":["escapeStringRegexp","require","ansiStyles","stdoutColor","stdout","template","isSimpleWindowsTerm","process","platform","env","TERM","toLowerCase","startsWith","levelMapping","skipModels","Set","styles","Object","create","applyOptions","obj","options","scLevel","level","undefined","enabled","Chalk","chalk","args","slice","call","arguments","chalkTag","apply","concat","setPrototypeOf","prototype","constructor","blue","open","keys","key","closeRe","RegExp","close","get","codes","build","_styles","_empty","visible","color","ansi","model","has","bgColor","bgModel","toUpperCase","proto","defineProperties","builder","applyStyle","self","defineProperty","enumerable","set","hasGrey","__proto__","argsLen","length","str","String","a","originalDim","dim","reverse","code","replace","strings","Array","isArray","join","parts","raw","i","push","module","exports","supportsColor","default"],"mappings":"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","sourcesContent":["'use strict';\nconst escapeStringRegexp = require('escape-string-regexp');\nconst ansiStyles = require('ansi-styles');\nconst stdoutColor = require('supports-color').stdout;\n\nconst template = require('./templates.js');\n\nconst isSimpleWindowsTerm = process.platform === 'win32' && !(process.env.TERM || '').toLowerCase().startsWith('xterm');\n\n// `supportsColor.level` â†’ `ansiStyles.color[name]` mapping\nconst levelMapping = ['ansi', 'ansi', 'ansi256', 'ansi16m'];\n\n// `color-convert` models to exclude from the Chalk API due to conflicts and such\nconst skipModels = new Set(['gray']);\n\nconst styles = Object.create(null);\n\nfunction applyOptions(obj, options) {\n\toptions = options || {};\n\n\t// Detect level if not set manually\n\tconst scLevel = stdoutColor ? stdoutColor.level : 0;\n\tobj.level = options.level === undefined ? scLevel : options.level;\n\tobj.enabled = 'enabled' in options ? options.enabled : obj.level > 0;\n}\n\nfunction Chalk(options) {\n\t// We check for this.template here since calling `chalk.constructor()`\n\t// by itself will have a `this` of a previously constructed chalk object\n\tif (!this || !(this instanceof Chalk) || this.template) {\n\t\tconst chalk = {};\n\t\tapplyOptions(chalk, options);\n\n\t\tchalk.template = function () {\n\t\t\tconst args = [].slice.call(arguments);\n\t\t\treturn chalkTag.apply(null, [chalk.template].concat(args));\n\t\t};\n\n\t\tObject.setPrototypeOf(chalk, Chalk.prototype);\n\t\tObject.setPrototypeOf(chalk.template, chalk);\n\n\t\tchalk.template.constructor = Chalk;\n\n\t\treturn chalk.template;\n\t}\n\n\tapplyOptions(this, options);\n}\n\n// Use bright blue on Windows as the normal blue color is illegible\nif (isSimpleWindowsTerm) {\n\tansiStyles.blue.open = '\\u001B[94m';\n}\n\nfor (const key of Object.keys(ansiStyles)) {\n\tansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');\n\n\tstyles[key] = {\n\t\tget() {\n\t\t\tconst codes = ansiStyles[key];\n\t\t\treturn build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, key);\n\t\t}\n\t};\n}\n\nstyles.visible = {\n\tget() {\n\t\treturn build.call(this, this._styles || [], true, 'visible');\n\t}\n};\n\nansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), 'g');\nfor (const model of Object.keys(ansiStyles.color.ansi)) {\n\tif (skipModels.has(model)) {\n\t\tcontinue;\n\t}\n\n\tstyles[model] = {\n\t\tget() {\n\t\t\tconst level = this.level;\n\t\t\treturn function () {\n\t\t\t\tconst open = ansiStyles.color[levelMapping[level]][model].apply(null, arguments);\n\t\t\t\tconst codes = {\n\t\t\t\t\topen,\n\t\t\t\t\tclose: ansiStyles.color.close,\n\t\t\t\t\tcloseRe: ansiStyles.color.closeRe\n\t\t\t\t};\n\t\t\t\treturn build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);\n\t\t\t};\n\t\t}\n\t};\n}\n\nansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), 'g');\nfor (const model of Object.keys(ansiStyles.bgColor.ansi)) {\n\tif (skipModels.has(model)) {\n\t\tcontinue;\n\t}\n\n\tconst bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);\n\tstyles[bgModel] = {\n\t\tget() {\n\t\t\tconst level = this.level;\n\t\t\treturn function () {\n\t\t\t\tconst open = ansiStyles.bgColor[levelMapping[level]][model].apply(null, arguments);\n\t\t\t\tconst codes = {\n\t\t\t\t\topen,\n\t\t\t\t\tclose: ansiStyles.bgColor.close,\n\t\t\t\t\tcloseRe: ansiStyles.bgColor.closeRe\n\t\t\t\t};\n\t\t\t\treturn build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);\n\t\t\t};\n\t\t}\n\t};\n}\n\nconst proto = Object.defineProperties(() => {}, styles);\n\nfunction build(_styles, _empty, key) {\n\tconst builder = function () {\n\t\treturn applyStyle.apply(builder, arguments);\n\t};\n\n\tbuilder._styles = _styles;\n\tbuilder._empty = _empty;\n\n\tconst self = this;\n\n\tObject.defineProperty(builder, 'level', {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\treturn self.level;\n\t\t},\n\t\tset(level) {\n\t\t\tself.level = level;\n\t\t}\n\t});\n\n\tObject.defineProperty(builder, 'enabled', {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\treturn self.enabled;\n\t\t},\n\t\tset(enabled) {\n\t\t\tself.enabled = enabled;\n\t\t}\n\t});\n\n\t// See below for fix regarding invisible grey/dim combination on Windows\n\tbuilder.hasGrey = this.hasGrey || key === 'gray' || key === 'grey';\n\n\t// `__proto__` is used because we must return a function, but there is\n\t// no way to create a function with a different prototype\n\tbuilder.__proto__ = proto; // eslint-disable-line no-proto\n\n\treturn builder;\n}\n\nfunction applyStyle() {\n\t// Support varags, but simply cast to string in case there's only one arg\n\tconst args = arguments;\n\tconst argsLen = args.length;\n\tlet str = String(arguments[0]);\n\n\tif (argsLen === 0) {\n\t\treturn '';\n\t}\n\n\tif (argsLen > 1) {\n\t\t// Don't slice `arguments`, it prevents V8 optimizations\n\t\tfor (let a = 1; a < argsLen; a++) {\n\t\t\tstr += ' ' + args[a];\n\t\t}\n\t}\n\n\tif (!this.enabled || this.level <= 0 || !str) {\n\t\treturn this._empty ? '' : str;\n\t}\n\n\t// Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,\n\t// see https://github.com/chalk/chalk/issues/58\n\t// If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.\n\tconst originalDim = ansiStyles.dim.open;\n\tif (isSimpleWindowsTerm && this.hasGrey) {\n\t\tansiStyles.dim.open = '';\n\t}\n\n\tfor (const code of this._styles.slice().reverse()) {\n\t\t// Replace any instances already present with a re-opening code\n\t\t// otherwise only the part of the string until said closing code\n\t\t// will be colored, and the rest will simply be 'plain'.\n\t\tstr = code.open + str.replace(code.closeRe, code.open) + code.close;\n\n\t\t// Close the styling before a linebreak and reopen\n\t\t// after next line to fix a bleed issue on macOS\n\t\t// https://github.com/chalk/chalk/pull/92\n\t\tstr = str.replace(/\\r?\\n/g, `${code.close}$&${code.open}`);\n\t}\n\n\t// Reset the original `dim` if we changed it to work around the Windows dimmed gray issue\n\tansiStyles.dim.open = originalDim;\n\n\treturn str;\n}\n\nfunction chalkTag(chalk, strings) {\n\tif (!Array.isArray(strings)) {\n\t\t// If chalk() was called by itself or with a string,\n\t\t// return the string itself as a string.\n\t\treturn [].slice.call(arguments, 1).join(' ');\n\t}\n\n\tconst args = [].slice.call(arguments, 2);\n\tconst parts = [strings.raw[0]];\n\n\tfor (let i = 1; i < strings.length; i++) {\n\t\tparts.push(String(args[i - 1]).replace(/[{}\\\\]/g, '\\\\$&'));\n\t\tparts.push(String(strings.raw[i]));\n\t}\n\n\treturn template(chalk, parts.join(''));\n}\n\nObject.defineProperties(Chalk.prototype, styles);\n\nmodule.exports = Chalk(); // eslint-disable-line new-cap\nmodule.exports.supportsColor = stdoutColor;\nmodule.exports.default = module.exports; // For TypeScript\n"]},"metadata":{},"sourceType":"script"}